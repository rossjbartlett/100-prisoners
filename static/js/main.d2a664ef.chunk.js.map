{"version":3,"sources":["components/card.tsx","containers/CardGrid.tsx","utils/utils.ts","containers/Dashboard.tsx","App.tsx","index.tsx"],"names":["StyledCardContainer","styled","div","Card","cardLabel","cardValue","color","style","hasValue","undefined","backgroundColor","padding","StyledCardGridContainer","StyledCardGrid","CardGrid","boxes","currentGuess","currentPrisoner","getCardColor","box","value","label","visited","map","key","notify","text","showAlert","console","log","alert","Container","InfoPanel","ControlItem","getNewBoxes","list","values","Array","fill","_","i","sort","Math","random","Dashboard","useState","setBoxes","setCurrentPrisoner","setCurrentGuess","numGuesses","setNumGuesses","numWins","setNumWins","numAttempts","setNumAttempts","showAlerts","setShowAlerts","tickTime","setTickTime","isPaused","setIsPaused","startNewAttempt","prev","markBoxAsVisited","boxNumber","prevBoxes","b","incrementNumGuesses","handleSuccess","nextPrisoner","useEffect","timer","setTimeout","NUM_BOXES","guess","currentGuessBox","find","Error","clearInterval","clearTimeout","marginRight","minValue","maxValue","step","formatLabel","onChange","checked","marginTop","alignSelf","marginBottom","toFixed","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2a664ef.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledCardContainer = styled.div`\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n  height: fit-content;\n  text-align: center;\n  border-radius: 5px;\n  box-sizing: border-box;\n  width: 60px;\n\n  p,\n  span {\n    margin: 0;\n  }\n  span {\n    font-size: 0.8rem;\n    margin-left: 25px;\n    margin-top: 10px;\n    color: steelblue;\n  }\n`\n\ninterface CardProps {\n  readonly cardLabel: number\n  readonly cardValue?: number\n  readonly color: string\n  readonly style?: React.CSSProperties\n}\n\nexport function Card({\n  cardLabel,\n  cardValue,\n  color,\n  style,\n}: CardProps): JSX.Element {\n  const hasValue = cardValue !== undefined\n  return (\n    <StyledCardContainer\n      style={{\n        backgroundColor: color,\n        padding: hasValue ? '15px 15px 0 15px' : '15px',\n        ...style,\n      }}\n    >\n      <p>{cardLabel}</p>\n      {hasValue && <span>{cardValue}</span>}\n    </StyledCardContainer>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card } from '../components/card'\nimport { Box } from '../types/types'\n\nconst StyledCardGridContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\nconst StyledCardGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: 1fr 1fr;\n  gap: 30px;\n`\n\ninterface CardGridProps {\n  readonly boxes: readonly Box[]\n  readonly currentGuess: number | null\n  readonly currentPrisoner: number\n}\n\nexport function CardGrid({\n  boxes,\n  currentGuess,\n  currentPrisoner,\n}: CardGridProps): JSX.Element {\n  function getCardColor(box: Box): string {\n    if (box.value === currentPrisoner && currentGuess === box.label) {\n      // a prisoner found their value\n      return 'lime'\n    }\n    if (box.label === currentGuess) {\n      // prisoner made an incorrect guess\n      return 'deepskyblue'\n    }\n    if (box.visited) {\n      // box was visited by the prisoner\n      return 'gold'\n    }\n    // box has not yet been opened\n    return 'whitesmoke'\n  }\n\n  return (\n    <StyledCardGridContainer>\n      <StyledCardGrid>\n        {boxes.map((box) => (\n          <Card\n            key={box.label}\n            cardLabel={box.label}\n            cardValue={box.value}\n            color={getCardColor(box)}\n          />\n        ))}\n      </StyledCardGrid>\n    </StyledCardGridContainer>\n  )\n}\n","export function notify(text: string, showAlert: boolean): void {\n  console.log(text)\n  if (showAlert) {\n    alert(text)\n  }\n}\n\nexport function shuffle<T>(list: readonly T[]): readonly T[] {\n  return [...list].sort(() => Math.random() - 0.5)\n}\n","import React, { useEffect, useState } from 'react'\r\nimport InputRange from 'react-input-range'\r\nimport Switch from 'react-switch'\r\nimport styled from 'styled-components'\r\nimport 'react-input-range/lib/css/index.css'\r\nimport { Box } from '../types/types'\r\nimport { Card } from '../components/card'\r\nimport { CardGrid } from './CardGrid'\r\nimport { notify, shuffle } from '../utils/utils'\r\n\r\nconst NUM_BOXES = 100\r\nconst MAX_GUESSES = NUM_BOXES / 2\r\nconst MIN_TICK_TIME = 5\r\nconst MAX_TICK_TIME = 1500\r\nconst TICK_TIME_STEP = 5\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  height: 100vh;\r\n`\r\n\r\nconst InfoPanel = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 200px;\r\n\r\n  & > p {\r\n    margin: 1rem 0 0 0;\r\n  }\r\n`\r\n\r\nconst ControlItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 30px 0;\r\n  span {\r\n    margin-right: 20px;\r\n  }\r\n`\r\n\r\nfunction getNewBoxes(): readonly Box[] {\r\n  // randomize value order\r\n  const values = shuffle(new Array(NUM_BOXES).fill(null).map((_, i) => i + 1))\r\n  // make boxes\r\n  const boxes = new Array(NUM_BOXES)\r\n    .fill(0)\r\n    .map((_, i) => ({ label: i + 1, value: values[i], visited: false }))\r\n  return boxes\r\n}\r\n\r\nexport function Dashboard(): JSX.Element {\r\n  const [boxes, setBoxes] = useState<readonly Box[]>(getNewBoxes())\r\n  const [currentPrisoner, setCurrentPrisoner] = useState<number>(1)\r\n  const [currentGuess, setCurrentGuess] = useState<number | null>(null)\r\n  const [numGuesses, setNumGuesses] = useState<number>(0)\r\n  const [numWins, setNumWins] = useState<number>(0)\r\n  const [numAttempts, setNumAttempts] = useState<number>(0)\r\n  const [showAlerts, setShowAlerts] = useState<boolean>(false)\r\n  const [tickTime, setTickTime] = useState<number>(600)\r\n  const [isPaused, setIsPaused] = useState<boolean>(false)\r\n\r\n  function startNewAttempt(): void {\r\n    setNumAttempts((prev) => prev + 1)\r\n    setBoxes(getNewBoxes())\r\n    setCurrentPrisoner(1)\r\n    setNumGuesses(0)\r\n    setCurrentGuess(null)\r\n  }\r\n\r\n  function markBoxAsVisited(boxNumber: number): void {\r\n    setBoxes((prevBoxes) =>\r\n      prevBoxes.map((b) => {\r\n        return b.label === boxNumber ? { ...b, visited: true } : b\r\n      }),\r\n    )\r\n  }\r\n\r\n  function incrementNumGuesses(): void {\r\n    setNumGuesses((prev) => prev + 1)\r\n  }\r\n\r\n  function clearBoxVisits(): void {\r\n    setBoxes((prevBoxes) =>\r\n      prevBoxes.map((b) => {\r\n        return { ...b, visited: false }\r\n      }),\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isPaused) {\r\n      return\r\n    }\r\n    const timer = setTimeout(() => {\r\n      if (numGuesses >= MAX_GUESSES) {\r\n        notify(`Prisoner ${currentPrisoner} FAILED`, showAlerts)\r\n        startNewAttempt()\r\n        return\r\n      }\r\n      // make guess\r\n      if (currentGuess == null) {\r\n        // make first guess at box with prisoner's own label\r\n        const guess = currentPrisoner\r\n        incrementNumGuesses()\r\n        setCurrentGuess(currentPrisoner)\r\n        markBoxAsVisited(guess)\r\n        return\r\n      }\r\n      // move to next guess\r\n      const currentGuessBox = boxes.find((b) => b.label === currentGuess)\r\n      if (!currentGuessBox) {\r\n        throw new Error(`error finding box with label ${currentGuess}`)\r\n      }\r\n      const guess = currentGuessBox.value\r\n      incrementNumGuesses()\r\n      setCurrentGuess(guess)\r\n      markBoxAsVisited(guess)\r\n    }, tickTime)\r\n    return (): void => {\r\n      clearInterval(timer)\r\n    }\r\n  })\r\n\r\n  function handleSuccess(): void {\r\n    notify(\r\n      `Prisoner ${currentPrisoner} SUCCEEDED in ${numGuesses} guess${\r\n        numGuesses > 1 ? 'es' : ''\r\n      }`,\r\n      showAlerts,\r\n    )\r\n    const nextPrisoner = currentPrisoner + 1\r\n    if (nextPrisoner > NUM_BOXES) {\r\n      // this attempt won\r\n      notify('WIN', showAlerts)\r\n      setNumWins((prev) => prev + 1)\r\n      startNewAttempt()\r\n      return\r\n    }\r\n    // move to next prisoner\r\n    clearBoxVisits()\r\n    setCurrentPrisoner(nextPrisoner)\r\n    setNumGuesses(0)\r\n    setCurrentGuess(null)\r\n  }\r\n\r\n  useEffect(() => {\r\n    // detect/handle success\r\n    const currentGuessBox = boxes.find((b) => b.label === currentGuess)\r\n    const success = currentGuessBox && currentGuessBox.value === currentPrisoner\r\n    if (!success) {\r\n      return\r\n    }\r\n\r\n    const timer = setTimeout(() => {\r\n      handleSuccess()\r\n    }, tickTime)\r\n\r\n    return (): void => clearTimeout(timer)\r\n  }, [currentPrisoner, currentGuess, tickTime])\r\n\r\n  return (\r\n    <Container>\r\n      <InfoPanel>\r\n        <ControlItem>\r\n          <span style={{ marginRight: '30px' }}>Speed</span>\r\n          <InputRange\r\n            minValue={MIN_TICK_TIME}\r\n            maxValue={MAX_TICK_TIME}\r\n            step={TICK_TIME_STEP}\r\n            formatLabel={(value: number): string => `${value} ms`}\r\n            value={tickTime}\r\n            onChange={(value): void => setTickTime(value as number)}\r\n          />\r\n        </ControlItem>\r\n        <ControlItem>\r\n          <span>Show Alerts</span>\r\n          <Switch\r\n            onChange={(checked): void => setShowAlerts(checked)}\r\n            checked={showAlerts}\r\n          />\r\n        </ControlItem>\r\n        <ControlItem style={{ marginTop: 0 }}>\r\n          <span>Pause</span>\r\n          <Switch\r\n            onChange={(checked): void => setIsPaused(checked)}\r\n            checked={isPaused}\r\n          />\r\n        </ControlItem>\r\n        <Card\r\n          cardLabel={currentPrisoner}\r\n          color=\"whitesmoke\"\r\n          style={{ alignSelf: 'center', marginBottom: '15px' }}\r\n        />\r\n        <p>Current Prisoner Guesses: {numGuesses}</p>\r\n        <p>Wins: {numWins}</p>\r\n        <p>Attempts: {numAttempts}</p>\r\n        <p>Win %: {(numAttempts ? numWins / numAttempts : 0).toFixed(3)}</p>\r\n      </InfoPanel>\r\n      <CardGrid\r\n        boxes={boxes}\r\n        currentGuess={currentGuess}\r\n        currentPrisoner={currentPrisoner}\r\n      />\r\n    </Container>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Dashboard } from './containers/Dashboard'\r\n\r\n\r\nfunction App(): JSX.Element {\r\n  return (\r\n    <>\r\n      <main>\r\n        <Dashboard  />\r\n      </main>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n"],"sourceRoot":""}